name: ACR_Deployment_Pipeline

trigger: none

pool:
  name: ACR-Agent-Pool

stages:
- stage: Deploy_Infrastructure
  displayName: 'Deploy ACR Infrastructure'
  jobs:
  - job: Terraform_Deploy
    displayName: 'Deploy ACR with Terraform'
    steps:
    - script: |
        # Check if ACR exists
        if az acr show --name acrjhusa1 --resource-group dev-jhu-sa-rg-use01 &> /dev/null; then
          echo "ACR already exists, skipping Terraform deployment"
          exit 0
        fi
        
        cd "Deploy ACR/terraform"
        terraform init
        terraform plan -out=tfplan
        terraform apply -auto-approve tfplan
      displayName: 'Deploy ACR if not exists'

- stage: Build_And_Push_Image
  displayName: 'Build and Push Docker Image'
  dependsOn: Deploy_Infrastructure
  jobs:
  - job: Docker_Build
    displayName: 'Build and Push Python Image'
    steps:
    - script: |
        ACR_NAME="acrjhusa1"
        ACR_LOGIN_SERVER="${ACR_NAME}.azurecr.io"
        
        echo "ACR Name: $ACR_NAME"
        echo "ACR Login Server: $ACR_LOGIN_SERVER"
        
        # Login to ACR
        az acr login --name $ACR_NAME
        
        # Build Docker image
        cd "Deploy ACR/app"
        docker build -t python-flask-app .
        
        # Tag and push
        docker tag python-flask-app ${ACR_LOGIN_SERVER}/python-flask-app:v1
        docker push ${ACR_LOGIN_SERVER}/python-flask-app:v1
        
        # Verify
        az acr repository list --name $ACR_NAME --output table
        az acr repository show-tags --name $ACR_NAME --repository python-flask-app --output table
      displayName: 'Build and Push Complete Workflow'